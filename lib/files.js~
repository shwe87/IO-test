/*Only access to the temporary files*/

var {components,Cc, Ci, Cu} = require("chrome");

var tmp = 'TmpD';
/*Creating nSIFile object*/
components.utils.import("resource://gre/modules/FileUtils.jsm");
/*var file = components.classes["@mozilla.org/file/directory_service;1"].
           getService(components.interfaces.nsIProperties).
           get("CurProcD", components.interfaces.nsIFile);
*/
var temporary = components.classes["@mozilla.org/file/directory_service;1"].
           getService(components.interfaces.nsIProperties).
           get(tmp, components.interfaces.nsIFile);

/*For reading and writing*/
components.utils.import("resource://gre/modules/NetUtil.jsm");
components.utils.import("resource://gre/modules/FileUtils.jsm");  
var converter = components.classes["@mozilla.org/intl/scriptableunicodeconverter"].
                createInstance(components.interfaces.nsIScriptableUnicodeConverter);    
              
var fstream = components.classes["@mozilla.org/network/file-input-stream;1"].
		      createInstance(components.interfaces.nsIFileInputStream);
var cstream = components.classes["@mozilla.org/intl/converter-input-stream;1"].
		      createInstance(components.interfaces.nsIConverterInputStream);



exports.createFolder = function (folderName){
	/*creates a folder called "DIR" in the user's profile folder.*/
	var dir = FileUtils.getDir(tmp, [folderName], true);
	console.log(dir.path);

}

exports.createFile = function(fileName){
	var status = "";
	/*Create temporary file in the /tmp directory*/
	try{
		var file = FileUtils.getFile(tmp, [fileName]);
		file.create(components.interfaces.nsIFile.NORMAL_FILE_TYPE, FileUtils.PERMS_FILE);
		// do whatever you need to the created file
		console.log(file.path);
		status = 'OK';
	}
	catch(NS_ERROR_FILE_ALREADY_EXISTS){
		console.log('file already exists');
		status = 'ERROR';
	}
	return status;
}

exports.iterateDir = function (){
	var entries = temporary.directoryEntries;
	var array = [];
	while(entries.hasMoreElements()){
		var entry = entries.getNext();
  		entry.QueryInterface(components.interfaces.nsIFile);
  		array.push(entry);
  		console.log(entry.path);
  		
	}

}

exports.write = function(fileName,data){
	var status = 'OK';
	var file = FileUtils.getFile(tmp,[fileName]);
	
	if (!file.isWritable){
		console.log('Cannot be written!');
		status = 'ERROR';
	}

	
	var ostream = FileUtils.openSafeFileOutputStream(file);
	converter.charset = "UTF-8";
	var istream = converter.convertToInputStream(data);

	// The last argument (the callback) is optional.
	NetUtil.asyncCopy(istream, ostream, function(status) {
  		if (!components.isSuccessCode(status)) {
    			console.log('Error has ocurred');
    			status = 'ERROR';
  		}
  		// Data has been written to the file.
	});
	
	return status;	
}



exports.read = function(fileName){
	// |file| is nsIFile
	var data = "";
	
	var file = FileUtils.getFile(tmp,[fileName]);
	
	fstream.init(file, -1, 0, 0);
	cstream.init(fstream, "UTF-8", 0, 0); // you can use another encoding here if you wish

	let (str = {}) {
	  let read = 0;
	  do { 
	    read = cstream.readString(0xffffffff, str); // read as much as we can and put it in str.value
	    data += str.value;
	  } while (read != 0);
	}
	cstream.close(); // this closes fstream

	console.log(data);
	return data;



}

